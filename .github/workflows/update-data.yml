name: Update data for current version

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-data:
    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:11.4.5
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: drupal
          MYSQL_USER: drupal
          MYSQL_PASSWORD: drupal
        ports:
          - 3306:3306

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'

      - name: Setup project
        run: |
          cp ".env.example" ".env"
          sed -i 's/^DB_HOST=.*/DB_HOST=127.0.0.1/' .env
          sudo rm -Rf web/sites
          composer install --no-progress --prefer-dist --optimize-autoloader
          mkdir -p "web/sites/default"
          cp ".docker/files/settings.php.default" "web/sites/default/settings.php"

      - name: Test project install
        run: |
          vendor/bin/drush site-install 'minimal' --config-dir=../config/sync --account-name='admin' --account-pass='admin' --yes
          vendor/bin/drush deploy
          vendor/bin/drush locale-check
          vendor/bin/drush locale-update
          vendor/bin/drush cr

      - name: Test data fill
        run: |
          vendor/bin/drush fill-lotto-draws-data --all
          vendor/bin/drush cr

      - name: Get ZIP file URL from PHP
        id: get_zip_url
        run: |
          URL=$(vendor/bin/drush php:eval "echo \Drupal\jpf_import\Api\Sto::buildDownloadUrl(\Drupal\jpf_store\Enum\Versions::currentVersion());")
          echo "ZIP_URL=$URL" >> $GITHUB_ENV

      - name: Download ZIP & extract CSV file
        run: |
          wget -O /tmp/loto_201911.zip "$ZIP_URL"
          unzip -o /tmp/loto_201911.zip -d /tmp/

      - name: Count lines in old and new CSV
        id: check_lines
        run: |
          OLD_FILE="web/modules/custom/jpf_store/assets/doc/v5/loto_201911.csv"
          NEW_FILE="/tmp/loto_201911.csv"
          OLD_LINES=$(wc -l < "$OLD_FILE" || echo 0)
          NEW_LINES=$(wc -l < "$NEW_FILE" || echo 0)

          if [ "$NEW_LINES" -gt "$OLD_LINES" ]; then
            mv "$NEW_FILE" "$OLD_FILE"
            echo "update_needed=true" >> $GITHUB_ENV
          else
            echo "update_needed=false" >> $GITHUB_ENV
          fi

      - name: Check if PR already exists
        id: check_pr
        if: env.update_needed == 'true'
        run: |
          PR_EXISTS=$(gh pr list --state open --head update-data --json number --jq '.[].number' || echo "")
          if [[ -n "$PR_EXISTS" ]]; then
            echo "pr_number=$PR_EXISTS" >> $GITHUB_ENV
            echo "branch_exists=true" >> $GITHUB_ENV
          else
            echo "branch_exists=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update update-data branch
        if: env.update_needed == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          if [[ "${{ env.branch_exists }}" == "true" ]]; then
            git checkout update-data
          else
            git checkout -b update-data
          fi

          git add web/modules/custom/jpf_store/assets/doc/v5/loto_201911.csv
          git commit -m "Update data"
          git push origin update-data

      - name: Create or update Pull Request
        if: env.update_needed == 'true'
        run: |
          if [[ "${{ env.branch_exists }}" == "true" ]]; then
            echo "PR already exists, skipping PR creation."
          else
            gh pr create \
              --title "Update data" \
              --body "Automated update by github actions." \
              --head update-data \
              --base main \
              --assignee johnatas-x
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
