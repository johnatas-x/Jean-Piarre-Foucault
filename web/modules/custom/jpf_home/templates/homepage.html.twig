{% macro renderBall(ball, type) %}
  <li>
    <svg viewBox="0 0 100 100" aria-label="{{ (type == 'lucky' ? 'Lucky ball ' ~ ball : 'Ball ' ~ ball)|t }}">
      {% if type == 'classic' %}
        {% if not loop.parent.first %}
          <defs>
            <radialGradient id="gradient-blue" cx="50%" cy="50%" r="50%" fx="30%" fy="30%">
              <stop offset="0%" stop-color="#0096FF" />
              <stop offset="100%" stop-color="#005BB5" />
            </radialGradient>
          </defs>
        {% endif %}
        <circle cx="50" cy="50" r="48" class="blue" />
      {% else %}
        {% if not loop.parent.first %}
          <defs>
            <radialGradient id="gradient-red" cx="50%" cy="50%" r="50%" fx="30%" fy="30%">
              <stop offset="0%" stop-color="#FF6B6B" />
              <stop offset="100%" stop-color="#C90000" />
            </radialGradient>
          </defs>
        {% endif %}
        <circle cx="50" cy="50" r="48" class="red" />
      {% endif %}
      <circle cx="50" cy="50" r="25" fill="white" />
      <text x="50" y="52" class="number">{{ ball }}</text>
    </svg>
  </li>
{% endmacro %}

{% import _self as macros %}

{% set sections = {
  next_predict: 'Next prediction',
  last_draw: 'Last draw',
  last_predict: 'Last prediction',
} %}

{% for key, title in sections %}
  {% if attribute(_context, key).balls is not empty %}
    <h2>{{ title|t }}</h2>
    <div class="balls-container">
      <ul aria-label="balls">
        {% for ball in attribute(_context, key).balls %}
          {{ macros.renderBall(ball, 'classic') }}
        {% endfor %}
        {% if attribute(_context, key).lucky is not null %}
          {{ macros.renderBall(attribute(_context, key).lucky, 'lucky') }}
        {% endif %}
      </ul>
    </div>
  {% endif %}
{% endfor %}
